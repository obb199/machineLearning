from random import choice, random


def weights_searching(values, results, weights, epochs=150):
    for _ in range(epochs):
        for weight in range(len(weights)):
            error_before = 0
            for value in range(len(values)):
                error_before += results[value]
                for index in range(len(values[value])):
                    error_before -= values[value][index] * weights[index]

            old_value = weights[weight]
            weights[weight] = weight * (random() * choice([1, -1]) + choice([1, -1]))

            error_after = 0
            for value in range(len(values)):
                error_after += results[value]
                for index in range(len(values[value])):
                    error_after -= values[value][index] * weights[index]

            if abs(error_before) > abs(error_after):
                weights[weight] = old_value

    return weights


def test_weights(weights, values):
    train_results = []
    for value in values:
        dot = 0
        for i in range(len(value)):
            dot += value[i]*weights[i]

        train_results.append(dot)

    return train_results


if __name__ == '__main__':
    variable_values = [
        # Sepal length, Sepal width, Petal.length and Petal.width:
        [5.4, 3.7, 1.5, 0.2],
        [4.8, 3.4, 1.6, 0.2],
        [4.8, 3, 1.4, 0.1],
        [4.3, 3, 1.1, 0.1],
        [5.8, 4, 1.2, 0.2],
        [5.7, 4.4, 1.5, 0.4],
        [5.4, 3.9, 1.3, 0.4],
        [5.1, 3.5, 1.4, 0.3],
        [5.7, 3.8, 1.7, 0.3],
        [5.1, 3.8, 1.5, 0.3],
        [5.4, 3.4, 1.7, 0.2],
        [5.1, 3.7, 1.5, 0.4],
        [4.6, 3.6, 1, 0.2],
        [5.1, 3.3, 1.7, 0.5],
        [4.8, 3.4, 1.9, 0.2],
        [5, 3, 1.6, 0.2],
        [5, 3.4, 1.6, 0.4],
        [5.2, 3.5, 1.5, 0.2],
        [5.2, 3.4, 1.4, 0.2],
        [4.7, 3.2, 1.6, 0.2],
        [4.8, 3.1, 1.6, 0.2],
        [5.4, 3.4, 1.5, 0.4],
        [5.2, 4.1, 1.5, 0.1],
        [5.5, 4.2, 1.4, 0.2],
        [4.9, 3.1, 1.5, 0.2],
        [5, 3.2, 1.2, 0.2],
        [5.5, 3.5, 1.3, 0.2],
        [4.9, 3.6, 1.4, 0.1],
        [4.4, 3, 1.3, 0.2],
        [5.1, 3.4, 1.5, 0.2],
        [5, 3.5, 1.3, 0.3],
        [4.5, 2.3, 1.3, 0.3],
        [4.4, 3.2, 1.3, 0.2],
        [5, 3.5, 1.6, 0.6],
        [5.1, 3.8, 1.9, 0.4],
        [4.8, 3, 1.4, 0.3],
        [5.1, 3.8, 1.6, 0.2],
        [4.6, 3.2, 1.4, 0.2],
        [5.3, 3.7, 1.5, 0.2],
        [5, 3.3, 1.4, 0.2],
        [5, 2, 3.5, 1],
        [5.9, 3, 4.2, 1.5],
        [6, 2.2, 4, 1],
        [6.1, 2.9, 4.7, 1.4],
        [5.6, 2.9, 3.6, 1.3],
        [6.7, 3.1, 4.4, 1.4],
        [5.6, 3, 4.5, 1.5],
        [5.8, 2.7, 4.1, 1],
        [6.2, 2.2, 4.5, 1.5],
        [5.6, 2.5, 3.9, 1.1],
        [5.9, 3.2, 4.8, 1.8],
        [6.1, 2.8, 4, 1.3],
        [6.3, 2.5, 4.9, 1.5],
        [6.1, 2.8, 4.7, 1.2],
        [6.4, 2.9, 4.3, 1.3],
        [6.6, 3, 4.4, 1.4],
        [6.8, 2.8, 4.8, 1.4],
        [6.7, 3, 5, 1.7],
        [6, 2.9, 4.5, 1.5],
        [5.7, 2.6, 3.5, 1],
        [5.5, 2.4, 3.8, 1.1],
        [5.5, 2.4, 3.7, 1],
        [5.8, 2.7, 3.9, 1.2],
        [6, 2.7, 5.1, 1.6],
        [5.4, 3, 4.5, 1.5],
        [6, 3.4, 4.5, 1.6],
        [6.7, 3.1, 4.7, 1.5],
        [6.3, 2.3, 4.4, 1.3],
        [5.6, 3, 4.1, 1.3],
        [5.5, 2.5, 4, 1.3],
        [5.5, 2.6, 4.4, 1.2],
        [6.1, 3, 4.6, 1.4],
        [5.8, 2.6, 4, 1.2],
        [5, 2.3, 3.3, 1],
        [5.6, 2.7, 4.2, 1.3],
        [5.7, 3, 4.2, 1.2],
        [5.7, 2.9, 4.2, 1.3],
        [6.2, 2.9, 4.3, 1.3],
        [5.1, 2.5, 3, 1.1],
        [5.7, 2.8, 4.1, 1.3],
        [6.3, 3.3, 6, 2.5],
        [5.8, 2.7, 5.1, 1.9],
        [7.1, 3, 5.9, 2.1],
        [6.3, 2.9, 5.6, 1.8],
        [6.5, 3, 5.8, 2.2],
        [7.6, 3, 6.6, 2.1],
        [4.9, 2.5, 4.5, 1.7],
        [7.3, 2.9, 6.3, 1.8],
        [6.7, 2.5, 5.8, 1.8],
        [7.2, 3.6, 6.1, 2.5],
        [6.5, 3.2, 5.1, 2],
        [6.4, 2.7, 5.3, 1.9],
        [6.8, 3, 5.5, 2.1],
        [5.7, 2.5, 5, 2],
        [6.7, 3.3, 5.7, 2.1],
        [7.2, 3.2, 6, 1.8],
        [6.2, 2.8, 4.8, 1.8],
        [6.1, 3, 4.9, 1.8],
        [6.4, 2.8, 5.6, 2.1],
        [7.2, 3, 5.8, 1.6],
        [7.4, 2.8, 6.1, 1.9],
        [7.9, 3.8, 6.4, 2],
        [6.4, 2.8, 5.6, 2.2],
        [6.3, 2.8, 5.1, 1.5],
        [6.1, 2.6, 5.6, 1.4],
        [7.7, 3, 6.1, 2.3],
        [6.3, 3.4, 5.6, 2.4],
        [6.4, 3.1, 5.5, 1.8],
        [6, 3, 4.8, 1.8],
        [6.9, 3.1, 5.4, 2.1],
        [6.7, 3.1, 5.6, 2.4],
        [6.9, 3.1, 5.1, 2.3],
        [5.8, 2.7, 5.1, 1.9],
        [6.8, 3.2, 5.9, 2.3],
        [6.7, 3.3, 5.7, 2.5],
        [6.7, 3, 5.2, 2.3],
        [6.3, 2.5, 5, 1.9],
        [6.5, 3, 5.2, 2],
        [6.2, 3.4, 5.4, 2.3],
        [5.9, 3, 5.1, 1.8]]

    # 10 = Setosa
    # 20 = Versicolor
    # 30 = Virginica

    results = [10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,
               10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,
               20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20,
               20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20,
               30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30,
               30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30]

    weights = [random(), random(), random(), random()]

    new_weights = weights_searching(variable_values, results, weights)
    print(new_weights)

    variables_test = [
                    [5.1, 3.5, 1.4, .2],
                    [4.9, 3, 1.4, .2],
                    [4.7, 3.2, 1.3, .2],
                    [4.6, 3.1, 1.5, .2],
                    [5, 3.6, 1.4, .2],
                    [5.4, 3.9, 1.7, .4],
                    [4.6, 3.4, 1.4, .3],
                    [5, 3.4, 1.5, .2],
                    [4.4, 2.9, 1.4, .2],
                    [4.9, 3.1, 1.5, .1],
                    [7, 3.2, 4.7, 1.4],
                    [6.4, 3.2, 4.5, 1.5],
                    [6.9, 3.1, 4.9, 1.5],
                    [5.5, 2.3, 4, 1.3],
                    [6.5, 2.8, 4.6, 1.5],
                    [5.7, 2.8, 4.5, 1.3],
                    [6.3, 3.3, 4.7, 1.6],
                    [4.9, 2.4, 3.3, 1],
                    [6.6, 2.9, 4.6, 1.3],
                    [5.2, 2.7, 3.9, 1.4],
                    [5.8, 2.8, 5.1, 2.4],
                    [6.4, 3.2, 5.3, 2.3],
                    [6.5, 3, 5.5, 1.8],
                    [7.7, 3.8, 6.7, 2.2],
                    [7.7, 2.6, 6.9, 2.3],
                    [6, 2.2, 5, 1.5],
                    [6.9, 3.2, 5.7, 2.3],
                    [5.6, 2.8, 4.9, 2],
                    [7.7, 2.8, 6.7, 2],
                    [6.3, 2.7, 4.9, 1.8]]

    results_test = [10, 10, 10, 10, 10, 10, 10, 10, 10, 10,
                    20, 20, 20, 20, 20, 20, 20, 20, 20, 20,
                    30, 30, 30, 30, 30, 30, 30, 30, 30, 30]

    results_with_new_weights = test_weights(weights, variables_test)
    testing_new_weights = []

    for i in range(len(results_with_new_weights)):
        if results_with_new_weights[i] >= -21.14:
            testing_new_weights.append(10)
        elif results_with_new_weights[i] >= -34.37:
            testing_new_weights.append(20)
        else:
            testing_new_weights.append(30)

    count = 0
    for i in range(len(testing_new_weights)):
        if testing_new_weights[i] == results_test[i]:
            count += 1

    print(count/len(testing_new_weights))
    print(testing_new_weights)
